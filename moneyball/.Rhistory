character_vector <- c("a", "b", "c")
#' c() = Combine Function - Cria um vetor!
#' ========================================================
# Complete the code for boolean_vector
boolean_vector <- c(TRUE, FALSE, TRUE)
#' Montando Vetores
#' ========================================================
# Poker winnings from Monday to Friday
poker_vector <- c(140, -50, 20, -120, 240)
# Roulette winnings from Monday to Friday
roulette_vector <-  c(-24, -50, 100, 350, 10)
poker_vector
#' Nomeando as Variáveis de um Vetor
#' ========================================================
# Poker winnings from Monday to Friday
poker_vector <- c(140, -50, 20, -120, 240)
# Roulette winnings from Monday to Friday
roulette_vector <- c(-24, -50, 100, -350, 10)
#' Criando Vetores com valores simples
#' ========================================================
numeric_vector <- c(1, 10, 49)
character_vector <- c("a", "b", "c")
#' c() = Combine Function - Cria um vetor!
#' ========================================================
# Complete the code for boolean_vector
boolean_vector <- c(TRUE, FALSE, TRUE)
#' Montando Vetores
#' ========================================================
# Poker winnings from Monday to Friday
poker_vector <- c(140, -50, 20, -120, 240)
# Roulette winnings from Monday to Friday
roulette_vector <-  c(-24, -50, 100, 350, 10)
poker_vector
#' Nomeando as Variáveis de um Vetor
#' ========================================================
# Poker winnings from Monday to Friday
poker_vector <- c(140, -50, 20, -120, 240)
# Roulette winnings from Monday to Friday
roulette_vector <- c(-24, -50, 100, -350, 10)
days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
names(poker_vector) <-   days_vector
names(roulette_vector) <- days_vector
dia = "Monday"
roulette_vector[dia]
roullete_vector
roulette_vector
roulette_vector
# Take the sum of A_vector and B_vector
total_vector <- B_vector + A_vector
#' Somando Vetores
A_vector <- c(1, 2, 3)
B_vector <- c(4, 5, 6)
# Take the sum of A_vector and B_vector
total_vector <- B_vector + A_vector
total_vector
total_poker <- sum(poker_vector)
total_roulette <-  sum(roulette_vector)
sum(poker_vector)
sum(poker_vector)
sum(poker_vector)
poker_vector[c(2,3,4)]
poker_vector[2:4]
poker_vector[c("Monday", "Tuesday", "Wednesday")]
poker_vector[c("Monday", "Tuesday", "Wednesday")]
poker_vector[c("Monday", "Tuesday", "Wednesday")]
poker_vector[c("Monday", "Tuesday", "Wednesday")]
poker_vector[c("Monday", "Tuesday", "Wednesday")]
poker_vector[c("Monday", "Tuesday", "Wednesday")]
poker_vector[c("Monday", "Tuesday", "Wednesday")]
years_vector = seq(from=initial_year, to=initial_year+n-1, by=1)
years_vector = 10:20
years_vector
library(fitdistrplus)
# Carregando arquivos com Funções
source("financial_functions.R")
source("cba.R")
source("data_import.R")
### TODO: Importar aqui
dados = import_data("Dados.xlsx")
## Primeiro teste para rodar uma análise de custo benefício probabilística
### Parâmetros para Rodar a Análise
#Número de Períodos a Analisar e Ano Inicial
n = 10
initial_year = 2017
### Rodando a Análise CBA 200 vezes
cba_replications = replicate(n=100,
cba_analysis(mean_cost=30,
sd_cost=5,
mean_benefit=30,
sd_benefit=10)
)
# Separando os resultados em vetores diferentes
# vendo o VPL
vpl = cba_replications[1,]
# retornando o CBR
cbr = cba_replications[2,]
# retornando o ROI
roi = cba_replications[3,]
# Ajustando o Gráfico para 3 imagens:
par(mfrow=c(1,3))
# Vendo a Distribuição do VPL
hist(vpl,main="Distribuição do VPL")
# Vendo a Distribuição do CBR
hist(cbr,main="Distribuição do CBR")
# Vendo a Distribuição do ROI
hist(roi,main="Distribuição do ROI")
# Ajustando o CBA para uma distribuição normal
cbr_fit = fitdist(cbr,"norm")
roi_fit = fitdist(roi,"norm")
vpl_fit = fitdist(vpl,"norm")
# Estimando o CBR
cbr_medio = as.numeric(cbr_fit$estimate[["mean"]])
cbr_medio = round(cbr_medio, digits=2)
cat("Para cada 1 real investido em SST, retornam em média ", cbr_medio, " Reais.")
# Estimando o ROI
roi_medio = as.numeric(roi_fit$estimate[["mean"]])*100
roi_medio = round(roi_medio,digits = 2)
cat("O retorno sobre investimento esperado é de ", roi_medio, " %.")
# Informando o VPL
vpl_medio = as.numeric(vpl_fit$estimate[["mean"]])
vpl_medio = round(vpl_medio,digits = 2)
cat("O Valor Presente Líquido do Investimento esperado é ", vpl_medio, " Reais.")
# # Mostrando o Intervalo de Confiança do CBR..
# confint(cba_fit)
#
# # Ajustando o gráfico...
# par(mfrow=c(2,2))
# # Mostrando os resultados do Ajuste à distribuição Normal
# plot(cba_fit)
# Carregando arquivos com Funções
source("financial_functions.R")
source("cba.R")
source("data_import.R")
install.packages('rsconnect')
rsconnect::setAccountInfo(name='pedrolima',
token='D6182C94E4F7C6CCF5ED7636EFF17A07',
secret='d3wRSO1Lu/86HIjIjyvLuCT9JNIMJ3GP8X9gX1iC')
install.packages("shiny")
x = -100:100
y = 2*x +1
y_inv = y_1*-1
plot(x,y)
plot(x,y_inv)
x = -100:100
y = 2*x +1
y_inv = y*-1
plot(x,y)
plot(x,y_inv)
x = -100:100
y = 2*x +1
y_inv = y*-1
plot(x,y)
plot(x,y_inv)
plot(x,y,y_inv)
plot(x,c(y,y_inv))
install.packages("devtools")
library(devtools)
install_github("pedroliman/cba-under-risk/oshcba")
library(oshcba)
cbr(2,3)
library(oshcba)
install_github("pedroliman/cba-under-risk/oshcba")
cbr(2,3)
install_github("pedroliman/oshcba")
library(oshcba)
cbr(2,3)
executarAplicativo()
executarAplicativo()
executarAplicativo()
executarAplicativo()
executarAplicativo()
executarAplicativo()
executarAplicativo()
executarAplicativo()
executarAplicativo()
executarAplicativo()
executarAplicativo()
executarAplicativo()
executarAplicativo()
library(shiny)
executarAplicativo()
install_github("pedroliman/oshcba")
library(oshcba)
cbr(2,3)
executarAplicativo()
install_github("pedroliman/oshcba")
library(oshcba)
cbr(2,3)
executarAplicativo()
executarAplicativo()
executarAplicativo()
executarAplicativo()
library(dplyr)
dataframe = cars
dataframe
select(dataframe,dataframe$speed)
select(dataframe,dataframe$speed)
select(dataframe,speed)
var = "speed"
select(dataframe,var)
var = "speed"
select(dataframe,var)
var = "speed"
select(dataframe,var)
str(dataframe)
dim(dataframe)
names(dataframe)
head(select(dataframe,speed:dist))
head(select(dataframe,-dist))
filter(dataframe, speed < 4)
filter(dataframe, speed <= 4)
filter(dataframe, speed == 4 & dist ==2)
arrange(dataframe, speed)
arrange(dataframe,desc(speed))
rename(dataframe, novonome = speed)
dataframe = cars
var = "speed"
dim(dataframe)
str(dataframe)
names(dataframe)
head(select(dataframe,speed:dist))
head(select(dataframe,-dist))
filter(dataframe, speed <= 4)
filter(dataframe, speed == 4 & dist ==2)
arrange(dataframe, speed)
tail(arrange(dataframe,speed))
# Ordenando ao Contrário
arrange(dataframe,desc(speed))
mutate(dataframe, time = speed*dist)
mutate(dataframe,categoria = factor(speed>10,labels=c("rapido","lento")))
mutate(dataframe,categoria = factor(speed<10,labels=c("rapido","lento")))
mutate(dataframe,categoria = factor(speed<=10,labels=c("rapido","lento")))
mutate(dataframe,categoria = factor(speed<=15,labels=c("rapido","lento")))
group_by(dataframe,categoria)
carros_agrupados = group_by(dataframe,categoria)
carros_agrupados = group_by(dataframe, categoria)
mutate(dataframe,categoria = factor(speed<=15,labels=c("rapido","lento")))
carros_agrupados = group_by(dataframe, categoria)
mutate(dataframe,categoria = factor(1*(speed<=15),labels=c("rapido","lento")))
carros_agrupados = group_by(dataframe, categoria)
carros_agrupados = group_by(dataframe, categoria)
carros_agrupados = group_by(dataframe, categoria)
carros_agrupados = group_by(dataframe, categoria)
carros_agrupados = group_by(dataframe, categoria)
carros_agrupados = group_by(dataframe, categoria)
carros_agrupados = group_by(dataframe, categoria)
carros_agrupados = group_by(dataframe, categoria)
carros_agrupados = group_by(dataframe, teste)
mutate(dataframe,teste = factor(1*(speed<=15),labels=c("rapido","lento")))
carros_agrupados = group_by(dataframe, teste)
carros_agrupados <- group_by(dataframe, teste)
carros_agrupados <- group_by(dataframe, teste)
carros_agrupados <- group_by(dataframe, teste)
mutate(dataframe,teste = factor(1*(speed<=15),labels=c("rapido","lento")))
mutate(dataframe,teste = factor(1*(speed<=15),labels=c("rapido","lento")))
mutate(dataframe,teste = factor(1*(speed<=15),labels=c("rapido","lento")))
mutate(dataframe,teste = factor(1*(speed<=15),labels=c("rapido","lento")))
mutate(dataframe,teste = factor(1*(speed<=15),labels=c("rapido","lento")))
mutate(dataframe,teste = factor(1*(speed<=15),labels=c("rapido","lento")))
mutate(dataframe,teste = factor(1*(speed<=15),labels=c("rapido","lento")))
mutate(dataframe,teste = factor(1*(speed<=15),labels=c("rapido","lento")))
carros_agrupados
carros_agrupados
carros_agrupados <- group_by(dataframe, teste)
carros_agrupados <- group_by(dataframe, teste)
carros_agrupados <- group_by(dataframe)
carros_agrupados <- group_by(dataframe,speed)
carros_agrupados <- group_by(dataframe,teste)
carros_agrupados <- group_by(dataframe,dist)
carros_agrupados
dataframe = mutate(dataframe,categoria = factor(1*(speed<=15),labels=c("rapido","lento")))
carros_agrupados <- group_by(dataframe,categoria)
carros_agrupados
summarize(carros_agrupados,mean_speed=mean(speed))
summarize(carros_agrupados,mean_speed=mean(speed),mean_dist = mean(dist))
dataframe %>%
mutate(categoria = factor(1*(speed<=15),labels=c("rapido","lento")))
dataframe = cars
dataframe
dataframe %>%
mutate(categoria = factor(1*(speed<=15),labels=c("rapido","lento")))
media = dataframe %>%
mutate(categoria = factor(1*(speed<=15),labels=c("rapido","lento"))) %>%
group_by(categoria) %>%
summarise(mean_speed = mean(speed))
media
media = dataframe %>%
mutate(categoria = factor(1*(speed<=15),labels=c("rapido","lento"))) %>%
group_by(categoria) %>%
summarise(mean_speed = mean(speed))
media
media = dataframe %>%
mutate(categoria = factor(1*(speed<=15),labels=c("rapido","lento"))) %>%
group_by(categoria) %>%
summarise(mean_speed = mean(speed))
media
media = dataframe %>%
mutate(categoria = factor(1*(speed<=15),labels=c("rapido","lento"))) %>%
group_by(categoria) %>%
summarise(mean_speed = mean(speed))
media
media = summarise(
group_by(
mutate(
dataframe
,categoria = factor(1*(speed<=15),labels=c("rapido","lento")))
,categoria)
,mean_speed = mean(speed)
)
media
media = summarise(
group_by(
mutate(
dataframe
,categoria = factor(1*(speed<=15),labels=c("rapido","lento")))
,categoria)
,mean_speed = mean(speed)
)
media
media = summarise(
group_by(
mutate(
dataframe
,categoria = factor(1*(speed<=15),labels=c("rapido","lento")))
,categoria)
,mean_speed = mean(speed)
)
media
media = dataframe %>%
mutate(categoria = factor(1*(speed<=15),labels=c("rapido","lento"))) %>%
group_by(categoria) %>%
summarise(mean_speed = mean(speed))
media
library(oshcba)
executarAplicativo()
a = carregar_inputs()
a = carregar_inputs()
carregar_bibliotecas()
carregar_inputs()
a = carregar_inputs("D:\DADOS\dev\oshcba\Dados.xlsx")
a = carregar_inputs("D:/DADOS/dev/oshcba/Dados.xlsx")
library(devtools)
install_github("pedroliman/oshcba")
a = carregar_inputs("D:/DADOS/dev/oshcba/Dados.xlsx")
params = obter_parametros(a)
View(params)
oshcba_options = list(
SufixoFC = "Descontado"
)
oshcba_options = list(
sufixo_vars_fc = "Descontado",
variaveis_a_descontar = c("CustoTotal","DespesaAbsenteismo")
)
oshcba_options$SufixoFC
oshcba_options
x = 2x = 2x = 2setwd("D:/DADOS/dev/oshcba")
setwd("D:/DADOS/dev/oshcba")setwd("D:/DADOS/dev/oshcba")setwd("D:/DADOS/dev/oshcba");setwd("D:/DADOS/dev/oshcba")
a = 123
a = 123
a = 123
a = 123
a = 123
a = 123
a = 123
a = 123
a = 123
a = 123
a = 123
a = 123
a = 123
a = 123
inputs_funcao2 = c("input2a", "input2b")
inputs_funcao2 = c("input2a", "input2b")
funcoes_a_calcular = c("funcao1", "funcao2")
funcoes_calculadas = as.vector(character(), length = 2)
inputs_funcao1 = c("input1a", "input2b", "inputx")
inputs_funcao2 = c("input2a", "input2b")
funcoes_calculadas = vector(mode = "char", length = 2)
funcoes_calculadas = vector(mode = "character", length = 2)
inputs_funcao1 = c("input1a", "input2b", "inputx")
inputs_funcao2 = c("input2a", "input2b")
funcoes_e_inputs = data.frame(funcoes_a_calcular, inputs_funcao1, inputs_funcao2)
funcoes_a_calcular[1]*inputs_funcao1
inputs_funcao1 = combn(funcoes_a_calcular,funcoes_calculadas)
inputs_funcao1 = combn(funcoes_a_calcular,funcoes_calculadas)
teste_inputs_funcao1 = combn(funcoes_a_calcular,inputs_funcao1)
funcoes_e_inputs = data.frame()
funcoes_e_inputs["Funcao","Input"] = funcoes_a_calcular[1],inputs_funcao1
funcoes_e_inputs["Funcao"] = funcoes_a_calcular
funcoes_e_inputs[1] = funcoes_a_calcular
Funcoes = c("funcao1","funcao1","funcao1", "funcao2", "funcao2")
Inputs = c("input1a", "input2b", "inputx", "input2a", "input2b")
funcoes_e_inputs = data.frame(Funcoes, Inputs)
v_funcoes = ("funcao1", "funcao2")
v_funcoes_calculadas = vector(mode = "logical", length = length(v_funcoes))
v_funcoes = ("funcao1", "funcao2")
v_funcoes_calculadas = vector(mode = "logical", length = length(v_funcoes))
v_funcoes = ("funcao1", "funcao2")
v_funcoes = c("funcao1", "funcao2")
v_funcoes_calculadas = vector(mode = "logical", length = length(v_funcoes))
for (i = 1 in 1:iteracoes) {
print (i)
i + 1
}
for (i in 1:iteracoes) {
print (i)
i + 1
}
iteracoes = 10
for (i in 1:iteracoes) {
print (i)
i + 1
}
myfunction_times2 = function(x) {
x*2
}
myfunction_times3 = function(x) {
x*3
}
my_function_list = list(myfunction_times2 = myfunction_times2, myfunction_times3 = myfunction_times3)
my_function_vector = c("myfunction_times2", "myfunction_times3")
# Using My Functions:
my_x_vector = c(1,2,3,4,4,5,5,5,4)
# I know I could just, if I would just apply all the functions
y = purrr::map_dbl(.x = my_x_vector, .f = my_function_list)
myfunction_times2 = function(x) {
x*2
}
myfunction_times3 = function(x) {
x*3
}
my_function_list = list(myfunction_times2 = myfunction_times2, myfunction_times3 = myfunction_times3)
my_function_vector = c("myfunction_times2", "myfunction_times3")
# Using My Functions:
my_x_vector = c(1,2,3,4,4,5,5,5,4)
# I know I could just, if I would just apply all the functions
y = purrr::map_dbl(.x = my_x_vector, .f = my_function_list)
myfunction_times2 = function(x) {
x*2
}
myfunction_times3 = function(x) {
x*3
}
my_function_list = list(myfunction_times2 = myfunction_times2, myfunction_times3 = myfunction_times3)
my_function_vector = c("myfunction_times2", "myfunction_times3")
# Using My Functions:
my_x_vector = c(1,2,3,4,4,5,5,5,4)
# I know I could just, if I would just apply all the functions
y = purrr::map_dbl(.x = my_x_vector, .f = my_function_list)
y = purrr::map_dbl(.x = my_x_vector, .f = my_function_list)
y = purrr::map_dbl(.x = 10, .f = my_function_list)
map_dbl(.x = 10, .f = my_function_list)
purrr::map_dbl(.x = 10, .f = my_function_list)
library(purrr)
myfunction_times2 = function(x) {
x*2
}
myfunction_times3 = function(x) {
x*3
}
my_function_list = list(myfunction_times2 = myfunction_times2, myfunction_times3 = myfunction_times3)
my_function_vector = c("myfunction_times2", "myfunction_times3")
# Using My Functions:
my_x_vector = c(1,2,3,4,4,5,5,5,4)
setwd("D:/dev/sigepro-intro-R/moneyball/")
baseball <- read.csv("baseball.csv")
baseball <- read.csv("baseball.csv")
baseball <- read.csv("baseball.csv")
baseball <- read.csv("baseball.csv")
baseball <- read.csv("baseball.csv")
baseball <- read.csv("baseballasdasd.csv")
baseball <- read.csv("baseball.csv")
str(baseball)
summary(baseball)
baseball$Year
baseball["Year"]
colunas = colnames(baseball)
colunas
moneyball = subset(baseball, Year < 2002)
str(moneyball)
moneyball$RD = moneyball$RS - moneyball$RA
str(moneyball)
plot(moneyball$RD, moneyball$W, main = "Vitórias vs Runs Diff.", xlab = "Run. Diff.", ylab = "Vitórias")
cor(x = moneyball$RD, y = moneyball$W, method=c("pearson", "kendall", "spearman"))
cor.test(x = moneyball$RD, y = moneyball$W, method=c("pearson", "kendall", "spearman"))
ggpubr::ggscatter(moneyball, x = "RD", y = "W",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Run Diff.", ylab = "Vitórias")
modelo_vitorias = lm(W ~ RD, data=moneyball)
summary(modelo_vitorias)
RD_min = (95 - 80.8814)/0.1058
RD_min
str(moneyball)
modeloruns = lm(formula = RS ~ OBP + SLG + BA, data=moneyball)
summary(modeloruns)
modeloruns_sBA = lm(formula = RS ~ OBP + SLG, data=moneyball)
summary(modeloruns_sBA)
modeloruns_sBA = lm(formula = RS ~ OBP + SLG, data=moneyball)
summary(modeloruns_sBA)
modelorunsallowed = lm(formula = RA ~ OOBP + OSLG, data=moneyball)
summary(modelorunsallowed)
Runs = -804.3 + 2737.77 * 0.339 + 1584.91 *  0.430
Runs
RunsAllowed = -837 + 2913.6 * 0.307 + 1514.29 * 0.373
RunsAllowed
Vitorias = 80.88 + 0.1057 * (Runs - RunsAllowed)
if (Vitorias >= 95) {
paste("Esse time deve chegar nas Playoffs com ", Vitorias, " vitórias.")
} else {
paste("Compre outros Jogadores, este time não chega nas playoffs com apenas ", Vitorias, " vitórias!")
}
